[["_main.html", "Introduction to Data Manipulation Getting our data right with dplyr 0.1 Introduction 0.2 Data Structure 0.3 Manipulating with dplyr 0.4 select() 0.5 filter() 0.6 The Pipe Operator: %&gt;% 0.7 mutate() 0.8 group_by() and summarize() 0.9 arrange() 0.10 Quiz", " Introduction to Data Manipulation Getting our data right with dplyr 0.1 Introduction 0.1.1 Welcome! Welcome to our first tutorial for the Statistics II: Statistical Modeling &amp; Causal Inference (with R) course. The labs are designed to reinforce the material covered during the lectures by introducing you to hands-on applications. The practical nature of our class means that our labs will be data-centered. Throughout our class, we will get acquinted with multiple packages of the tidyverse. Though we expect that some of you may already know them, the tidyverse is a collection of R packages that share an underlying design, syntax, and structure. They will definitely make your life easier!! Today, we will start with a brief introduction to data manipulation through the dplyr package. In this tutorial, you will learn to: identify the purpose of a set of dplyr verbs write statements in tidy syntax apply dplyr verbs to solve your data manipulation challenges This tutorial is partly based on R for Data Science, section 5.2, and Quantitative Politics with R, chapter 3. 0.1.2 What we will need today We'll practice some wrangling in dplyr using data for penguin sizes recorded by Dr. Kristen Gorman and others at several islands in the Palmer Archipelago, Antarctica. Data are originally published in: Gorman KB, Williams TD, Fraser WR (2014) PLoS ONE 9(3): e90081. doi:10.1371/journal.pone.0090081 You do not need to import the data to work through this tutorial - the data are already here waiting behind the scenes. But if you do ever want to use the penguins data outside of this tutorial, they now exist in the palmerpenguins package in R. If you are ready to begin, click on! 0.2 Data Structure 0.2.1 Tidy data Generally, we will encounter data in a tidy format. Tidy data refers to a way of mapping the structure of a data set. In a tidy data set: Each variable forms a column. Each observation forms a row. Each type of observational unit forms a table 0.2.2 The penguins data set The 3 species of penguins in this data set are Adelie, Chinstrap and Gentoo. The data set contains 8 variables: species: a factor denoting the penguin species (Adelie, Chinstrap, or Gentoo) island: a factor denoting the island (in Palmer Archipelago, Antarctica) where observed culmen_length_mm: a number denoting length of the dorsal ridge of penguin bill (millimeters) culmen_depth_mm: a number denoting the depth of the penguin bill (millimeters) flipper_length_mm: an integer denoting penguin flipper length (millimeters) body_mass_g: an integer denoting penguin body mass (grams) sex: a factor denoting penguin sex (MALE, FEMALE) year an integer denoting the year of the record Illustration by @allisonhorst 0.2.3 Let's explore the data set. head() is a function that returns the first couple rows from a data frame. Write the R code required to explore the first observations of the penguins data set: Notice that when you press 'Run', the output of the code is returned below it! So by pressing 'Run', you've run your first R code of the class! head(penguins) 0.3 Manipulating with dplyr 0.3.1 What we will learn today In this tutorial, you'll learn and practice examples using some functions in dplyr to work with data. Those are: select(): keep or exclude some columns filter(): keep rows that satisfy your conditions mutate(): add columns from existing data or edit existing columns group_by(): lets you define groups within your data set summarize(): get summary statistics arrange(): reorders the rows according to single or multiple variables Let's get to work. 0.4 select() The first verb (function) we will utilize is select(). We can employ it to manipulate our data based on columns. If you recall from our initial exploration of the data set there were eight variables attached to every observation. Do you recall them? If you do not, there is no problem. You can utilize names() to retrieve the names of the variables in a data frame. names(penguins) Say we are only interested in the species, island, and year variables of these data, we can utilize the following syntax: select(data, columns) Activity The following code chunk would select the variables we need. Can you adapt it, so that we keep the body_mass_g and sex variables as well? dplyr::select(penguins, species, island, year) # A tibble: 344 x 3 species island year &lt;fct&gt; &lt;fct&gt; &lt;int&gt; 1 Adelie Torgersen 2007 2 Adelie Torgersen 2007 3 Adelie Torgersen 2007 4 Adelie Torgersen 2007 5 Adelie Torgersen 2007 6 Adelie Torgersen 2007 7 Adelie Torgersen 2007 8 Adelie Torgersen 2007 9 Adelie Torgersen 2007 10 Adelie Torgersen 2007 # … with 334 more rows # you just need to type the names of the columns dplyr::select(penguins, species, island, year, body_mass_g, sex) To drop variables, use - before the variable name [i.e. select(penguins, -year)] to drop the year column 0.5 filter() The second verb (function) we will employ is filter(). filter() lets you use a logical test to extract specific rows from a data frame. To use filter(), pass it the data frame followed by one or more logical tests. filter() will return every row that passes each logical test. The more commonly used logical operators are: ==: Equal to !=: Not equal to &gt;, &gt;=: Greater than, greater than or equal to &lt;, &lt;=: Less than, less than or equal to &amp;, |: And, or Say we are interested in retrieving the observations from the year 2007. We would do: dplyr::filter(penguins, year == 2007) # A tibble: 110 x 8 species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; 1 Adelie Torge… 39.1 18.7 181 3750 male 2 Adelie Torge… 39.5 17.4 186 3800 fema… 3 Adelie Torge… 40.3 18 195 3250 fema… 4 Adelie Torge… NA NA NA NA &lt;NA&gt; 5 Adelie Torge… 36.7 19.3 193 3450 fema… 6 Adelie Torge… 39.3 20.6 190 3650 male 7 Adelie Torge… 38.9 17.8 181 3625 fema… 8 Adelie Torge… 39.2 19.6 195 4675 male 9 Adelie Torge… 34.1 18.1 193 3475 &lt;NA&gt; 10 Adelie Torge… 42 20.2 190 4250 &lt;NA&gt; # … with 100 more rows, and 1 more variable: year &lt;int&gt; # you just need to utilize &amp; and type the logical operator for the species dplyr::filter(penguins, year == 2007 &amp; species == &quot;Chinstrap&quot;) Activity Can you adapt the code to retrieve all the observations of Chinstrap penguins from 2007 (remember that species contains character units) 0.6 The Pipe Operator: %&gt;% The pipe, %&gt;%, comes from the magrittr package by Stefan Milton Bache. Packages in the tidyverse load %&gt;% for you automatically, so you don’t usually load magrittr explicitly. This will be one of your best friends in R. Pipes are a powerful tool for clearly expressing a sequence of multiple operations. Let's think about baking for a second. Activity We can leverage the pipe operator to sequence our code in a logical manner. Can you adapt the following code chunck with the pipe and conditional logical operators we discussed? only_2009 &lt;- dplyr::filter(penguins, year == 2009) only_2009_chinstraps &lt;- dplyr::filter(only_2009, species == &quot;Chinstrap&quot;) only_2009_chinstraps_species_sex_year &lt;- dplyr::select(only_2009_chinstraps, species, sex, year) final_df &lt;- only_2009_chinstraps_species_sex_year final_df #to print it in our console penguins penguins %&gt;% dplyr::filter(year == 2009 &amp; species == &quot;Chinstrap&quot;) %&gt;% dplyr::select(species, sex, year) 0.7 mutate() mutate() lets us create, modify, and delete columns. The most common use for now will be to create new variables based on existing ones. Say we are working with a U.S. American client and they feel more confortable with assessing the weight of the penguins in pounds. We would utilize mutate() as such: mutate(new_var_name = conditions) penguins %&gt;% dplyr::mutate(body_mass_lbs = body_mass_g/453.6) penguins %&gt;% dplyr::mutate(body_mass_kg = body_mass_g/1000) Activity Can you edit the previous code chunk to render a new variable body_mass_kg? 0.8 group_by() and summarize() These two verbs group_by() and summarize() tend to go together. When combined , 'summarize()` will create a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input. For example: # compare this output with the one under the hint tab penguins %&gt;% dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T)) #max() does not know how to deal with NAs very well # A tibble: 1 x 1 heaviest_penguin &lt;int&gt; 1 6300 penguins %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarize(heaviest_penguin = max(body_mass_g, na.rm = T)) Activity Can you get the weight of the lightest penguin of each species? You can use min(). What happens when in addition to species you also group by year group_by(species, year)? 0.9 arrange() The arrange() verb is pretty self-explanatory. arrange() orders the rows of a data frame by the values of selected columns in ascending order. You can use the desc() argument inside to arrange in descending order. The following chunk arranges the data frame based on the length of the penguins' bill. You hint tab contains the code for the descending order alternative. arrange(variable_of_interest) penguins %&gt;% dplyr::arrange(bill_length_mm) # A tibble: 344 x 8 species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; 1 Adelie Dream 32.1 15.5 188 3050 fema… 2 Adelie Dream 33.1 16.1 178 2900 fema… 3 Adelie Torge… 33.5 19 190 3600 fema… 4 Adelie Dream 34 17.1 185 3400 fema… 5 Adelie Torge… 34.1 18.1 193 3475 &lt;NA&gt; 6 Adelie Torge… 34.4 18.4 184 3325 fema… 7 Adelie Biscoe 34.5 18.1 187 2900 fema… 8 Adelie Torge… 34.6 21.1 198 4400 male 9 Adelie Torge… 34.6 17.2 189 3200 fema… 10 Adelie Biscoe 35 17.9 190 3450 fema… # … with 334 more rows, and 1 more variable: year &lt;int&gt; penguins %&gt;% dplyr::arrange(desc(bill_length_mm)) Activity Can you create a data frame arranged by body_mass_g of the penguins observed in the &quot;Dream&quot; island? 0.10 Quiz penguins Here are some questions for you. Note that there are multiple ways to reach the same answer: Quiz "]]
